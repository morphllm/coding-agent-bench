[
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "add_early_return",
    "method": "morph",
    "redundant_tokens": 45,
    "time_generate_ms": 4829.358816146851,
    "time_apply_ms": 2603.5568714141846,
    "total_tokens": 190,
    "timestamp": "2025-08-13T23:44:13.042645",
    "query_prompt": "In the isInSelectingRange method, add an early return if the day is disabled when selectsDisabledDaysInRange is false",
    "response_data": "{\"target_file\": \"day.tsx\", \"instructions\": \"I will add an early return check in the isInSelectingRange method to return false if the day is disabled and selectsDisabledDaysInRange is false.\", \"code_edit\": \"  isInSelectingRange = () => {\\n    const {\\n      day,\\n      selectsStart,\\n      selectsEnd,\\n      selectsRange,\\n      selectsDisabledDaysInRange,\\n      startDate,\\n      endDate,\\n    } = this.props;\\n\\n    const selectingDate = this.props.selectingDate ?? this.props.preSelection;\\n\\n    if (\\n      !(selectsStart || selectsEnd || selectsRange) ||\\n      !selectingDate\\n    ) {\\n      return false;\\n    }\\n\\n    if (!selectsDisabledDaysInRange && this.isDisabled()) {\\n      return false;\\n    }\\n\\n// ... existing code ...\"}"
  },
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "add_early_return",
    "method": "search_replace",
    "redundant_tokens": 181,
    "time_generate_ms": 6614.084720611572,
    "time_apply_ms": 0.07915496826171875,
    "total_tokens": 277,
    "timestamp": "2025-08-13T23:44:19.657882",
    "query_prompt": "In the isInSelectingRange method, add an early return if the day is disabled when selectsDisabledDaysInRange is false",
    "response_data": "{\"edits\": [{\"old_string\": \"  isInSelectingRange = () => {\\n    const {\\n      day,\\n      selectsStart,\\n      selectsEnd,\\n      selectsRange,\\n      selectsDisabledDaysInRange,\\n      startDate,\\n      endDate,\\n    } = this.props;\\n\\n    const selectingDate = this.props.selectingDate ?? this.props.preSelection;\\n\\n    if (\\n      !(selectsStart || selectsEnd || selectsRange) ||\\n      !selectingDate ||\\n      (!selectsDisabledDaysInRange && this.isDisabled())\\n    ) {\\n      return false;\\n    }\", \"new_string\": \"  isInSelectingRange = () => {\\n    const {\\n      day,\\n      selectsStart,\\n      selectsEnd,\\n      selectsRange,\\n      selectsDisabledDaysInRange,\\n      startDate,\\n      endDate,\\n    } = this.props;\\n\\n    const selectingDate = this.props.selectingDate ?? this.props.preSelection;\\n\\n    if (!selectsDisabledDaysInRange && this.isDisabled()) {\\n      return false;\\n    }\\n\\n    if (\\n      !(selectsStart || selectsEnd || selectsRange) ||\\n      !selectingDate\\n    ) {\\n      return false;\\n    }\"}]}"
  },
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "refactor_classnames",
    "method": "morph",
    "redundant_tokens": 42,
    "time_generate_ms": 7136.4030838012695,
    "time_apply_ms": 2166.692018508911,
    "total_tokens": 409,
    "timestamp": "2025-08-13T23:44:28.961941",
    "query_prompt": "Refactor the getClassNames method to use a more readable approach by extracting the class conditions into a separate object/map before passing to clsx, while maintaining the exact same functionality.",
    "response_data": "{\"target_file\": \"day.tsx\", \"instructions\": \"I will refactor the getClassNames method to extract the class conditions into a separate object/map before passing to clsx for better readability while maintaining the exact same functionality.\", \"code_edit\": \"  getClassNames = (date: Date) => {\\n    const dayClassName = this.props.dayClassName\\n      ? this.props.dayClassName(date)\\n      : undefined;\\n\\n    const classConditions = {\\n      \\\"react-datepicker__day--disabled\\\": this.isDisabled(),\\n      \\\"react-datepicker__day--excluded\\\": this.isExcluded(),\\n      \\\"react-datepicker__day--selected\\\": this.isSelected(),\\n      \\\"react-datepicker__day--keyboard-selected\\\": this.isKeyboardSelected(),\\n      \\\"react-datepicker__day--range-start\\\": this.isRangeStart(),\\n      \\\"react-datepicker__day--range-end\\\": this.isRangeEnd(),\\n      \\\"react-datepicker__day--in-range\\\": this.isInRange(),\\n      \\\"react-datepicker__day--in-selecting-range\\\": this.isInSelectingRange(),\\n      \\\"react-datepicker__day--selecting-range-start\\\":\\n        this.isSelectingRangeStart(),\\n      \\\"react-datepicker__day--selecting-range-end\\\":\\n        this.isSelectingRangeEnd(),\\n      \\\"react-datepicker__day--today\\\": this.isCurrentDay(),\\n      \\\"react-datepicker__day--weekend\\\": this.isWeekend(),\\n      \\\"react-datepicker__day--outside-month\\\":\\n        this.isAfterMonth() || this.isBeforeMonth(),\\n    };\\n\\n    return clsx(\\n      \\\"react-datepicker__day\\\",\\n      dayClassName,\\n      \\\"react-datepicker__day--\\\" + getDayOfWeekCode(this.props.day),\\n      classConditions,\\n      this.getHighLightedClass(),\\n      this.getHolidaysClass(),\\n    );\\n  };\"}"
  },
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "refactor_classnames",
    "method": "search_replace",
    "redundant_tokens": 347,
    "time_generate_ms": 10454.864025115967,
    "time_apply_ms": 0.1308917999267578,
    "total_tokens": 726,
    "timestamp": "2025-08-13T23:44:39.418558",
    "query_prompt": "Refactor the getClassNames method to use a more readable approach by extracting the class conditions into a separate object/map before passing to clsx, while maintaining the exact same functionality.",
    "response_data": "{\"edits\": [{\"old_string\": \"  getClassNames = (date: Date) => {\\n    const dayClassName = this.props.dayClassName\\n      ? this.props.dayClassName(date)\\n      : undefined;\\n    return clsx(\\n      \\\"react-datepicker__day\\\",\\n      dayClassName,\\n      \\\"react-datepicker__day--\\\" + getDayOfWeekCode(this.props.day),\\n      {\\n        \\\"react-datepicker__day--disabled\\\": this.isDisabled(),\\n        \\\"react-datepicker__day--excluded\\\": this.isExcluded(),\\n        \\\"react-datepicker__day--selected\\\": this.isSelected(),\\n        \\\"react-datepicker__day--keyboard-selected\\\": this.isKeyboardSelected(),\\n        \\\"react-datepicker__day--range-start\\\": this.isRangeStart(),\\n        \\\"react-datepicker__day--range-end\\\": this.isRangeEnd(),\\n        \\\"react-datepicker__day--in-range\\\": this.isInRange(),\\n        \\\"react-datepicker__day--in-selecting-range\\\": this.isInSelectingRange(),\\n        \\\"react-datepicker__day--selecting-range-start\\\":\\n          this.isSelectingRangeStart(),\\n        \\\"react-datepicker__day--selecting-range-end\\\":\\n          this.isSelectingRangeEnd(),\\n        \\\"react-datepicker__day--today\\\": this.isCurrentDay(),\\n        \\\"react-datepicker__day--weekend\\\": this.isWeekend(),\\n        \\\"react-datepicker__day--outside-month\\\":\\n          this.isAfterMonth() || this.isBeforeMonth(),\\n      },\\n      this.getHighLightedClass(),\\n      this.getHolidaysClass(),\\n    );\\n  };\", \"new_string\": \"  getClassNames = (date: Date) => {\\n    const dayClassName = this.props.dayClassName\\n      ? this.props.dayClassName(date)\\n      : undefined;\\n    \\n    const classConditions = {\\n      \\\"react-datepicker__day--disabled\\\": this.isDisabled(),\\n      \\\"react-datepicker__day--excluded\\\": this.isExcluded(),\\n      \\\"react-datepicker__day--selected\\\": this.isSelected(),\\n      \\\"react-datepicker__day--keyboard-selected\\\": this.isKeyboardSelected(),\\n      \\\"react-datepicker__day--range-start\\\": this.isRangeStart(),\\n      \\\"react-datepicker__day--range-end\\\": this.isRangeEnd(),\\n      \\\"react-datepicker__day--in-range\\\": this.isInRange(),\\n      \\\"react-datepicker__day--in-selecting-range\\\": this.isInSelectingRange(),\\n      \\\"react-datepicker__day--selecting-range-start\\\":\\n        this.isSelectingRangeStart(),\\n      \\\"react-datepicker__day--selecting-range-end\\\":\\n        this.isSelectingRangeEnd(),\\n      \\\"react-datepicker__day--today\\\": this.isCurrentDay(),\\n      \\\"react-datepicker__day--weekend\\\": this.isWeekend(),\\n      \\\"react-datepicker__day--outside-month\\\":\\n        this.isAfterMonth() || this.isBeforeMonth(),\\n    };\\n    \\n    return clsx(\\n      \\\"react-datepicker__day\\\",\\n      dayClassName,\\n      \\\"react-datepicker__day--\\\" + getDayOfWeekCode(this.props.day),\\n      classConditions,\\n      this.getHighLightedClass(),\\n      this.getHolidaysClass(),\\n    );\\n  };\"}]}"
  },
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "add_comment",
    "method": "morph",
    "redundant_tokens": 24,
    "time_generate_ms": 5072.106122970581,
    "time_apply_ms": 2113.342046737671,
    "total_tokens": 109,
    "timestamp": "2025-08-13T23:44:46.604550",
    "query_prompt": "Add a comment at the beginning of the handleClick method explaining what it does",
    "response_data": "{\"target_file\": \"day.tsx\", \"instructions\": \"I will add a comment above the handleClick method to explain its functionality.\", \"code_edit\": \"  dayEl = createRef<HTMLDivElement>();\\n\\n  // Handles click events on the day element, only calling the onClick prop if the day is not disabled\\n  handleClick: DayProps[\\\"onClick\\\"] = (event) => {\\n    if (!this.isDisabled() && this.props.onClick) {\\n      this.props.onClick(event);\\n    }\\n  };\"}"
  },
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "add_comment",
    "method": "search_replace",
    "redundant_tokens": 53,
    "time_generate_ms": 4234.206438064575,
    "time_apply_ms": 0.03504753112792969,
    "total_tokens": 124,
    "timestamp": "2025-08-13T23:44:50.839096",
    "query_prompt": "Add a comment at the beginning of the handleClick method explaining what it does",
    "response_data": "{\"edits\": [{\"old_string\": \"  handleClick: DayProps[\\\"onClick\\\"] = (event) => {\\n    if (!this.isDisabled() && this.props.onClick) {\\n      this.props.onClick(event);\\n    }\\n  };\", \"new_string\": \"  // Handles click events on the day element. Only triggers the onClick callback if the day is not disabled.\\n  handleClick: DayProps[\\\"onClick\\\"] = (event) => {\\n    if (!this.isDisabled() && this.props.onClick) {\\n      this.props.onClick(event);\\n    }\\n  };\"}]}"
  },
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "extract_constant",
    "method": "morph",
    "redundant_tokens": 69,
    "time_generate_ms": 6510.7409954071045,
    "time_apply_ms": 2599.7538566589355,
    "total_tokens": 249,
    "timestamp": "2025-08-13T23:44:59.950295",
    "query_prompt": "Extract the string 'react-datepicker__day' into a constant at the top of the file called DAY_CLASS_NAME",
    "response_data": "{\"target_file\": \"day.tsx\", \"instructions\": \"I will add the DAY_CLASS_NAME constant at the top of the file after the imports and replace the usage of 'react-datepicker__day' string in the getClassNames method and isDayActiveElement method with the constant.\", \"code_edit\": \"// ... existing code ...\\n  KeyType,\\n} from \\\"./date_utils\\\";\\n\\nconst DAY_CLASS_NAME = \\\"react-datepicker__day\\\";\\n\\n// ... existing code ...\\n\\n  getClassNames = (date: Date) => {\\n    const dayClassName = this.props.dayClassName\\n      ? this.props.dayClassName(date)\\n      : undefined;\\n    return clsx(\\n      DAY_CLASS_NAME,\\n      dayClassName,\\n      \\\"react-datepicker__day--\\\" + getDayOfWeekCode(this.props.day),\\n// ... existing code ...\\n\\n  // the activeElement is in the container, and it is another instance of Day\\n  private isDayActiveElement() {\\n    return (\\n      this.props.containerRef?.current?.contains(document.activeElement) &&\\n      document.activeElement?.classList.contains(DAY_CLASS_NAME)\\n    );\\n  }\"}"
  },
  {
    "benchmark_id": "benchmark_1",
    "model": "claude-4",
    "file": "/Users/dhruvbhatia/CODE/misc/morph/coding-agent-bench/corpus/day.tsx",
    "query_id": "extract_constant",
    "method": "search_replace",
    "redundant_tokens": 70,
    "time_generate_ms": 6348.375082015991,
    "time_apply_ms": 0.11229515075683594,
    "total_tokens": 137,
    "timestamp": "2025-08-13T23:45:06.299316",
    "query_prompt": "Extract the string 'react-datepicker__day' into a constant at the top of the file called DAY_CLASS_NAME",
    "response_data": "{\"edits\": [{\"old_string\": \"} from \\\"./date_utils\\\";\\n\\ninterface DayProps\", \"new_string\": \"} from \\\"./date_utils\\\";\\n\\nconst DAY_CLASS_NAME = \\\"react-datepicker__day\\\";\\n\\ninterface DayProps\"}, {\"old_string\": \"    return clsx(\\n      \\\"react-datepicker__day\\\",\\n      dayClassName,\", \"new_string\": \"    return clsx(\\n      DAY_CLASS_NAME,\\n      dayClassName,\"}, {\"old_string\": \"      document.activeElement?.classList.contains(\\\"react-datepicker__day\\\")\", \"new_string\": \"      document.activeElement?.classList.contains(DAY_CLASS_NAME)\"}]}"
  }
]