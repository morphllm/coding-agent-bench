models:
  - name: "claude-sonnet-4"
    api_key_env: "ANTHROPIC_API_KEY"
    temperature: 0
    model_id: "claude-sonnet-4-20250514"
  - name: "gemini-flash-2.5"
    api_key_env: "GOOGLE_API_KEY"
    temperature: 0
    model_id: "gemini-2.5-flash"
  - name: "gemini-pro-2.5"
    api_key_env: "GOOGLE_API_KEY"
    temperature: 0
    model_id: "gemini-2.5-pro"
  - name: "claude-opus-4.1"
    api_key_env: "ANTHROPIC_API_KEY"
    temperature: 0
    model_id: "claude-opus-4-1-20250805"
  - name: "claude-opus-4"
    api_key_env: "ANTHROPIC_API_KEY"
    temperature: 0
    model_id: "claude-opus-4-20250514"
  - name: "claude-sonnet-3.7"
    api_key_env: "ANTHROPIC_API_KEY"
    temperature: 0
    model_id: "claude-3-7-sonnet-20250219"
  - name: "gpt-4o"
    api_key_env: "OPENAI_API_KEY"
    temperature: 0
    model_id: "gpt-4o-2024-11-20"
  - name: "gpt-o3"
    api_key_env: "OPENAI_API_KEY"
    temperature: 0
    model_id: "o3"
  - name: "gpt-o4-mini"
    api_key_env: "OPENAI_API_KEY"
    temperature: 0
    model_id: "o4-mini"

test_files:
  - path: "corpus/day.tsx"
    queries:
      - id: "day_extract_isOutsideMonth"
        prompt: "Extract a helper isOutsideMonth() that encapsulates the duplicate logic used by isAfterMonth and isBeforeMonth, and refactor getClassNames, renderDayContents, and shouldFocusDay to rely on it for the 'outside-month' checks."
      - id: "refactor_classnames"
        prompt: "Refactor the getClassNames method to use a more readable approach by extracting the class conditions into a separate object/map before passing to clsx, while maintaining the exact same functionality."
      - id: "day_tsdoc_all_methods"
        prompt: "Add TSDoc comments describing purpose, inputs, and outputs for every public method in the Day class (including getters like isDisabled/isSelected) and the DayProps interface."
      - id: "extract_constant"
        prompt: "Extract the string 'react-datepicker__day' into a constant at the top of the file called DAY_CLASS_NAME"
      - id: "day_refactor_overlay_renderer"
        prompt: "Extract a renderOverlay() helper that returns the overlay <span> when getTitle() is non-empty and null otherwise, add aria-live=polite when present, and update render() to call it."
  - path: "corpus/Canvas.ts"
    queries:
      - id: "fix_setStyle_key_collection"
        prompt: "In the setStyle function, change the two for-in loops so they add the property name (`key`) to the Set instead of the property value (`elementStyle[key]`). This prevents wrong keys from being processed."
      - id: "refactor_setStyle_diff_and_return"
        prompt: "Refactor setStyle to compute a diff of properties to add/remove, return a boolean indicating whether any changes were applied, and update _repairStyle to skip reinitialization when setStyle returns false."
      - id: "extract_important_constant"
        prompt: "Extract the string literal 'important' used in element.style.setProperty calls into a constant named STYLE_IMPORTANT_PRIORITY at the top of the file, and replace the hard-coded occurrences with this constant."
      - id: "extract_paint_helpers"
        prompt: "Extract the branches inside paint() into two helpers: _applyBackgroundMaskCover() and _applyDefaultBasePaint(), then call them from paint() without changing behavior."
      - id: "refactor_applyPreDrawUpdaters"
        prompt: "Refactor the _applyPreDrawUpdaters method by extracting the color-style update logic and the transform-update logic into two smaller helper functions to improve readability while keeping behavior identical."
  - path: "corpus/get_page_handler.ts"
    queries:
      - id: "gph_build_preload_header_helper"
        prompt: "Extract a buildPreloadLinkHeader(preload_files, baseUrl, es6_preload) helper that dedupes, filters, and maps files to a single Link header string; call it from handle_page and only set the header when the returned string is non-empty."
      - id: "gph_set_html_content_type_helper"
        prompt: "Introduce a MIME_HTML_TYPE constant and a setHtmlContentType(res) helper, and use it in both handle_page and bail so all HTML responses set a consistent Content-Type."
      - id: "gph_refactor_css_chunks_helper"
        prompt: "Refactor the css_chunks Set logic into a small helper function called getCssChunks to improve readability."
      - id: "gph_extract_safe_serialize_helper"
        prompt: "Extract a helper function safe_serialize(data, onError?) that wraps try_serialize and guarantees a non-null string, then use it for both preloaded data serialization and session serialization in handle_page."
      - id: "gph_extract_fetch_credentials_helper"
        prompt: "Extract the credential and cookie-merging logic inside preload_context.fetch into a helper attachCredentials(url, opts, req, res) and call it from fetch to reduce nesting while preserving behavior."
  - path: "corpus/subgraph_rewriter.py"
    queries:
      - id: "sr_gm_optional_signature_and_guard"
        prompt: "Change _replace_attributes to accept Optional[GraphModule] and raise a ValueError immediately when gm is None; update its sole call site to handle this behavior explicitly."
      - id: "sr_extract_try_get_attr_helper"
        prompt: "Extract the inner function try_get_attr from _replace_attributes into a separate top-level helper for clarity."
      - id: "sr_extract_graph_from_input_helper"
        prompt: "Introduce a helper get_graph_from_input(value) that returns a Graph given a Callable, Graph, or GraphModule, and replace the branching that builds pattern_graph and replacement graphs in both replace_pattern and _replace_pattern to use it."
      - id: "sr_fix_runtimeerror_message"
        prompt: "In _replace_attributes, build the RuntimeError as a single formatted string (e.g., with an f-string) instead of passing multiple string arguments so the message renders correctly."
      - id: "sr_typing_backports"
        prompt: "Replace PEP 585 built-in generics (e.g., dict[Node, Node], list[Node]) with typing.Dict and typing.List throughout this file for Python 3.8 compatibility."
  - path: "corpus/QueryExecution.scala"
    queries:
      - id: "qe_method_lazyAnalyzed"
        prompt: "Move the body of the lazyAnalyzed LazyTry block into a private method computeAnalyzedPlan and call it from LazyTry."
      - id: "qe_refactor_explainString_delegate"
        prompt: "Refactor explainString so it delegates to a new private explainWithMode(mode: ExplainMode, maxFields: Int, append: String => Unit) method to reduce duplication; update callers accordingly."
      - id: "qe_assertSupported_refactor_and_flag_shortcircuit"
        prompt: "Refactor assertSupported to compute a local flag, short-circuit when the unsupported operation check is disabled, and otherwise call the checker; keep behavior identical for enabled cases."
      - id: "qe_extract_append_section_helper"
        prompt: "Extract a private helper method appendPlanSection(title: String, plan: QueryPlan[_], append: String => Unit, maxFields: Int, verbose: Boolean, addSuffix: Boolean) and use it to replace repeated QueryPlan.append blocks in simpleString, writePlans, and stringWithStats without changing behavior."
      - id: "qe_introduce_withPhase_helper"
        prompt: "Introduce a private withPhase[T](phase: String)(block: => T): T that wraps executePhase and use it in the LazyTry blocks for optimization, planning, and executed plan creation to reduce boilerplate."
  - path: "corpus/flappy-bird.html"
    queries:
      - id: "design_bird"
        prompt: "make the bird red and have wings"
      - id: "full_screen"
        prompt: "detect desktop or mobile. if desktop, make the canvas full screen"
      - id: "random_emoji"
        prompt: "Turn the bird into a random emoji every time I go through a set of pipes"
      - id: "gravity_multiplier"
        prompt: "Every 10 points, increase gravity by 5%"
      - id: "cyberpunk_theme"
        prompt: "make the whole game cyberpunk themed"
  - path: "corpus/visualizer.cc"
    queries:
      - id: "visualizer_background_color"
        prompt: "Make the background color a gradient, blue on the left, green on the right and a smooth transition"
      - id: "toggle_colours"
        prompt: "Add keyboard control so pressing G toggles point color between orange and cyan"
      - id: "fps_counter"
        prompt: "Add an FPS counter to the HUD text, updated once per frame."
      - id: "rossler_attractor"
        prompt: "Replace the Lorenz system with the Rössler attractor equations while keeping the rest of the visualizer unchanged."
      - id: "toggle_two_attractors"
        prompt: "Add a new command line option so that running with --rossler shows the Rössler attractor, otherwise default to Lorenz."

output_dir: "results/"
